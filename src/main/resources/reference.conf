curacao {

  ## The timeout attached to any newly instantiated async context. Note that
  ## if the request is not completed within this window, an "onTimeout" error
  ## handler is invoked by the Servlet container, and handled by this library
  ## so that a default "timeout" error response is returned to the client.
  ## When dealing with asynchronous Servlet's, the "async timeout"
  ## applies to the duration between a call to startAsync() and complete().
  ## That is, if the async context is not completed within this time frame,
  ## the Servlet container fires an "onTimeout" event.
  ## Set to 0 (zero) for no timeout.
  async-context-timeout = 30s

  preload {
  
    ## Whether or not to "preload" (discover) the list of controllers and their
    ## associated API paths.  Default is false, so the routes will not be
    ## preloaded on web-application startup, but rather when the first request
    ## is received.
    routes = false
    
    ## Whether or not to "preload" (discover) the list of response type mapping
    ## handlers.  Default is false, so mapping handlers will be discovered
    ## when the first request is received.
    response-mapping-handlers = false
    
    ## Whether or not to "preload" (discover) the list of controller argument
    ## mappers.  Default is false, so mappers will be discovered when the first
    ## request is received.
    controller-argument-mappers = false
  
  }
  
  pools {
  
    ## Default configuration for the "request handler" thread pool.
    request {
      
      ## The size of the request handler thread pool.  Maps to how many
      ## concurrent requests this library will process concurrently.
      ## Set to 0 (zero) for an unbounded pool that will spawn as many
      ## threads as needed (dangerous unless you know what you're doing).
      size = 4
      
      ## The String.format() worthy name for each thread created and
      ## managed by this thread pool.
      name-format = "curacao-request-%s"
      
    }
    
    ## Default configuration for the "response handler" thread pool.
    response {
    
      ## The size of the request handler thread pool.  Maps to how many
      ## concurrent responses this library will process concurrently.
      ## Set to 0 (zero) for an unbounded pool that will spawn as many
      ## threads as needed (dangerous unless you know what you're doing).
      size = 4
      
      ## The String.format() worthy name for each thread created and
      ## managed by this thread pool.
      name-format = "curacao-response-%s"
      
    }
  
  }
  
  mappers {
  
    request {
    
      ## The maximum request body size this library will attempt to
      ## buffer into memory.  Default is 512kB.  Note this is ~per~ request.
      ## Set to 0 (zero) to ignore any request body size limit and attempt
      ## to buffer as much as possible into memory (dangerous).
      max-request-body-size = 512k
    
    }
  
  }
  
}
